{"version":3,"sources":["Nav.jsx","Summer.jsx","Spring.jsx","Fall.jsx","App.jsx","serviceWorker.jsx","index.jsx"],"names":["Nav","className","to","Summer","href","class","src","alt","Spring","Fall","Home","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gOAwBeA,MApBf,WAGE,OACE,6BAAK,uCACL,wBAAIC,UAAU,YACb,kBAAC,IAAD,CAAMC,GAAI,WACV,yCAEA,kBAAC,IAAD,CAAMA,GAAI,WACV,yCAEA,kBAAC,IAAD,CAAMA,GAAI,SACV,0CCoBUC,MAlCf,WACE,OACE,6BACI,wBAAIF,UAAU,UAAd,UAIF,0BAAMA,UAAU,WAEZ,uBAAGG,KAAK,2BAA2BC,MAAM,SACvC,yBAAKC,IAAI,mBAAmBC,IAAI,MAGlC,uBAAGH,KAAK,2BAA2BC,MAAM,SACvC,yBAAKC,IAAI,mBAAmBC,IAAI,MAGlC,uBAAGH,KAAK,2BAA2BC,MAAM,SACvC,yBAAKC,IAAI,mBAAmBC,IAAI,SCe7BC,MAjCf,WACE,OACE,6BACI,wBAAIP,UAAU,UAAd,UAGH,0BAAMA,UAAU,WAEhB,uBAAGG,KAAK,2BAA2BC,MAAM,SACvC,yBAAKC,IAAI,mBAAmBC,IAAI,MAGlC,uBAAGH,KAAK,2BAA2BC,MAAM,SACvC,yBAAKC,IAAI,mBAAmBC,IAAI,MAGlC,uBAAGH,KAAK,2BAA2BC,MAAM,SACvC,yBAAKC,IAAI,mBAAmBC,IAAI,SCaxBE,MA9Bf,WACE,OACE,6BACI,wBAAIR,UAAU,UAAd,QACA,0BAAMA,UAAU,WAEnB,uBAAGG,KAAK,yBAAyBC,MAAM,SACrC,yBAAKC,IAAI,iBAAiBC,IAAI,MAGhC,uBAAGH,KAAK,yBAAyBC,MAAM,SACrC,yBAAKC,IAAI,iBAAiBC,IAAI,MAGhC,uBAAGH,KAAK,yBAAyBC,MAAM,SACrC,yBAAKC,IAAI,iBAAiBC,IAAI,S,OCWrC,IAAMG,EAAM,kBACR,6BACI,wBAAIT,UAAU,UAAd,eAKOU,EA5Bf,WACI,OACI,kBAAC,IAAD,KACA,yBAAKV,UAAY,OAEjB,kBAAC,EAAD,MACA,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOW,KAAM,IAAIC,OAAK,EAACC,UAAaJ,IACpC,kBAAC,IAAD,CAAOE,KAAO,UAAUE,UAAcN,IACtC,kBAAC,IAAD,CAAOI,KAAO,UAAUE,UAAcX,IACtC,kBAAC,IAAD,CAAOS,KAAO,QAAQE,UAAcL,QCNxBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0e345519.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport {Link} from 'react-router-dom'\r\n\r\nfunction Nav() {\r\n\r\n  \r\n  return (\r\n    <nav><h3>Seasons</h3>\r\n    <ul className=\"navlinks\">\r\n     <Link to ='/Spring'> \r\n     <li> Spring </li> \r\n     </Link> \r\n     <Link to ='/Summer'> \r\n     <li> Summer </li> \r\n     </Link> \r\n     <Link to ='/Fall'> \r\n     <li> Fall </li> \r\n     </Link> \r\n    </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\nimport './App.css';\r\n\r\nfunction Summer() {\r\n  return (\r\n    <div> \r\n        <h1 className=\"header\">Summer</h1>\r\n\r\n    \r\n      \r\n      <body className=\"gallery\">\r\n        \r\n          <a href=\"/public/img/Summer/1.png\" class=\"image\">\r\n            <img src=\"img/Summer/1.jpg\" alt=\"\"></img>\r\n          </a>\r\n\r\n          <a href=\"/public/img/Summer/2.png\" class=\"image\">\r\n            <img src=\"img/Summer/2.jpg\" alt=\"\"></img>\r\n          </a>\r\n\r\n          <a href=\"/public/img/Summer/3.png\" class=\"image\">\r\n            <img src=\"img/Summer/3.jpg\" alt=\"\"></img>\r\n          </a>\r\n\r\n         \r\n\r\n      \r\n\r\n\r\n      </body>\r\n\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Summer;","import React from 'react';\r\nimport './App.css';\r\n\r\nfunction Spring() {\r\n  return (\r\n    <div>\r\n        <h1 className=\"header\">Spring</h1>\r\n    \r\n    \r\n     <body className=\"gallery\">\r\n        \r\n     <a href=\"/public/img/Spring/1.jpg\" class=\"image\">\r\n       <img src=\"img/Spring/1.jpg\" alt=\"\"></img>\r\n     </a>\r\n\r\n     <a href=\"/public/img/Spring/2.jpg\" class=\"image\">\r\n       <img src=\"img/Spring/2.jpg\" alt=\"\"></img>\r\n     </a>\r\n\r\n     <a href=\"/public/img/Spring/3.jpg\" class=\"image\">\r\n       <img src=\"img/Spring/3.jpg\" alt=\"\"></img>\r\n     </a>\r\n\r\n    \r\n\r\n \r\n\r\n\r\n </body>\r\n\r\n </div>\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default Spring;","import React from 'react';\r\nimport './App.css';\r\n\r\nfunction Fall() {\r\n  return (\r\n    <div>\r\n        <h1 className=\"header\">Fall</h1>\r\n        <body className=\"gallery\">\r\n        \r\n     <a href=\"/public/img/Fall/1.jpg\" class=\"image\">\r\n       <img src=\"img/Fall/1.jpg\" alt=\"\"></img>\r\n     </a>\r\n\r\n     <a href=\"/public/img/Fall/2.jpg\" class=\"image\">\r\n       <img src=\"img/Fall/2.jpg\" alt=\"\"></img>\r\n     </a>\r\n\r\n     <a href=\"/public/img/Fall/3.jpg\" class=\"image\">\r\n       <img src=\"img/Fall/3.jpg\" alt=\"\"></img>\r\n     </a>\r\n\r\n    \r\n\r\n \r\n\r\n\r\n </body>\r\n\r\n    \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Fall;","import React from 'react';\nimport './App.css';\nimport Nav from './Nav';\nimport Summer from './Summer';\nimport Spring from './Spring';\nimport Fall from './Fall';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nfunction App() {\n    return ( \n        <Router >\n        <div className = \"App\" >\n\n        <Nav />\n        <Switch>\n        <Route path =\"/\" exact component= { Home } />\n        <Route path = \"/Spring\" component = { Spring } /> \n        <Route path = \"/Summer\" component = { Summer } />  \n        <Route path = \"/Fall\" component = { Fall } />\n        </Switch>\n\n\n        </div>\n\n        </ Router >\n\n    );\n}\n\nconst Home =()=> (\n    <div>\n        <h1 className=\"header\">Home Page</h1>\n\n    </div>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}